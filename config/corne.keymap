/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define DEFAULT 0
#define LOWER   1
#define RAISE   2
#define TOP     3

/ {
    combos {
        compatible = "zmk,combos";

        lang {
            bindings = <&kp LG(SPACE)>;
            key-positions = <17 18>;
        };

        hyper {
            bindings = <&kp LS(LA(LC(LGUI)))>;
            key-positions = <37 40>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&lt RAISE TAB  &kp Q  &kp W  &kp E      &kp R     &kp T        &kp Y    &kp U    &kp I      &kp O    &kp P     &kp BSPC
&mo LOWER      &kp A  &kp S  &kp D      &kp F     &kp G        &kp H    &kp J    &kp K      &kp L    &kp SEMI  &kp SQT
&kp LSHFT      &kp Z  &kp X  &kp C      &kp V     &kp B        &kp N    &kp M    &kp COMMA  &kp DOT  &kp FSLH  &kp ESC
                             &kp LCTRL  &kp LGUI  &kp SPACE    &kp RET  &mo TOP  &kp RALT
            >;
        };

        lower_layer {
            bindings = <
&kp TAB    &kp EXCL  &kp AT_SIGN  &kp HASH      &kp DLLR      &kp PRCNT           &kp CARET  &kp AMPS   &kp STAR        &kp LPAR         &kp RPAR  &kp DEL
&trans     &trans    &trans       &kp C_VOL_DN  &kp C_VOL_UP  &kp K_MUTE          &kp LEFT   &kp DOWN   &kp UP          &kp RIGHT        &kp LBKT  &kp GRAVE
&kp LSHFT  &trans    &trans       &kp C_PREV    &kp C_NEXT    &kp C_PLAY_PAUSE    &kp MINUS  &kp EQUAL  &kp LEFT_BRACE  &kp RIGHT_BRACE  &kp BSLH  &trans
                                  &trans        &trans        &trans              &trans     &trans     &trans
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  -  |  7  |  8  |  9  |  +  | BKSP |

            bindings = <
&trans     &kp N1  &kp N2  &kp N3        &kp N4        &kp N5              &kp N6     &kp N7     &kp N8    &kp N9    &kp N0    &kp BSPC
&kp LCTRL  &trans  &trans  &kp C_VOL_DN  &kp C_VOL_UP  &kp K_MUTE          &kp MINUS  &kp EQUAL  &kp LBKT  &kp RBKT  &kp BSLH  &trans
&kp LSHFT  &trans  &trans  &kp C_PREV    &kp C_NEXT    &kp C_PLAY_PAUSE    &trans     &trans     &trans    &trans    &trans    &trans
                           &trans        &trans        &trans              &trans     &trans     &trans
            >;
        };

        top_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  BRIGHT_UP  |  BRIGHT_DOWN  |  VOL_DOWN  |  VOL_UP  |  MUTE  |      |  -  |  7  |  8  |  9  |  +  | BKSP |
            // | CTRL |             |               |             |         |        |      |  .  |  4  |  5  |  6  |  -  |  `   |
            // | SHFT |             |              |             |          |        |      |  0  |  1  |  2  |  3  |  *  |  /   |
            //                      |              |             |          |         |     |     |     |

            bindings = <
&trans     &kp C_BRI_DN  &kp C_BRI_UP  &kp C_VOL_DN  &kp C_VOL_UP  &kp K_MUTE    &kp KP_N7  &kp KP_N8  &kp KP_N9   &kp KP_PLUS      &trans         &kp BSPC
&kp LCTRL  &trans        &trans        &trans        &trans        &trans        &kp KP_N4  &kp KP_N5  &kp KP_N6   &kp KP_MINUS     &trans         &kp GRAVE
&kp LSHFT  &out OUT_BLE  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0  &bt BT_CLR    &kp KP_N1  &kp KP_N2  &kp KP_N3   &kp KP_MULTIPLY  &kp KP_DIVIDE  &trans
                                       &trans        &trans        &trans        &kp KP_N0  &trans     &kp KP_DOT
            >;
        };
    };
};
